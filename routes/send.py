"""
Send message module.
"""

from flask import Blueprint, request
from utils.message import MessageUtils
from utils.logging import configure_logging
from rabbitmq.publisher import publish_message
from config import APP_PASSWORD

logger = configure_logging(__name__)

send = Blueprint("send", __name__)


@send.route("/send", methods=["POST"])
def send_message():
    """
    Send a message via a bot. Meant for sources that do not use RabbitMQ or is impractical to use.

    Logs the message in Postgres with:
    - Source (e.g. Twilio)
    - UID (unique message ID)
    - Timestamp
    - Text
    - Images (if any)

    Request body includes the following fields:
    - body (str): The message text to send
    - password (str): The password to authenticate the request
    - source (str): The source of the message (e.g. "Twilio")
    - (optional) wbor_message_id (str): The unique message ID (generated by message originator)
        - If not provided (the case for non-RabbitMQ messages), a UID will be generated
    - (optional) images (list): A list of image URLs to send

    Returns:
    - str: "OK" if the message was sent successfully
    - str: "Unauthorized" if the password is incorrect
    - str: "Bad Request" if the request body is missing required fields
    - str: "Internal Server Error" if the message failed to send
    """
    body = request.json

    # Check for password
    if body.get("password") != APP_PASSWORD:
        logger.warning(
            "Unauthorized access attempt with password: %s", body.get("password")
        )
        return "Unauthorized"
    logger.info("Send callback received: %s", body.remove("password"))

    # Check for required fields
    required_fields = ["body", "source"]
    missing_fields = [field for field in required_fields if field not in body]
    if missing_fields:
        logger.error("Bad Request: Missing required fields: %s", missing_fields)
        return "Bad Request"

    # Generate or use the provided UID
    sender_uid = body.get("wbor_message_id")
    if sender_uid is None:
        sender_uid = MessageUtils.gen_uuid()
        logger.debug("No UID provided - generated new UID: %s", sender_uid)
        body["wbor_message_id"] = sender_uid
    else:
        logger.debug("UID provided by source: %s", sender_uid)

    logger.info("Publishing to RabbitMQ: %s", sender_uid)
    publish_message(body, "source.standard")
    return "OK"
